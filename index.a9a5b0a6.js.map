{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCEA,kBAAkB;AAClB,I,EAGQ,EACA,EAJF,EAAQ,SAAS,aAAa,CAAC,SAuC/B,GApCE,E,A,S,C,E,G,M,O,C,G,O,E,E,E,EAAW,EAAM,QAAQ,CAAC,EAAE,CAAC,QAAQ,G,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,G,E,I,A,W,M,A,U,wI,IACrC,EAAa,EAAE,CAErB,EAAK,OAAO,CAAC,SAAA,CAAb,EACE,IAAM,EAAS,CACb,KAAM,GACN,SAAU,GACV,IAAK,EACL,OAAQ,CACV,EAEM,EACF,EAAI,WAAW,CAAC,IAAI,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,SAAA,CAD3C,EACoD,OAAA,EAAM,IAAI,E,GAE1D,EAAI,EAEH,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,OAAO,IAAI,CAAC,EAAA,CAAA,OAAA,QAAA,CAAA,GAAzB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAkC,CAAlC,IAAM,EAAN,EAAA,KAAA,CACH,GAAI,AAAQ,WAAR,EAAkB,CACpB,CAAM,CAAC,EAAI,CAAG,CAAM,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC,IAAK,IAEjD,QACF,CAEkB,KAAA,IAAd,CAAM,CAAC,EAAE,GACX,CAAM,CAAC,EAAI,CAAG,CAAM,CAAC,EAAE,CAEvB,IAEJ,C,C,M,E,CAZK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAcL,EAAW,IAAI,CAAC,EAClB,GAEO,GAKH,EAAS,WACb,EAAM,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAG,wBASlB,MAAA,CAPN,EAAO,GAAG,CAAC,SAAA,CAFjB,EAGE,MAAC,uBAEW,MAAA,CADA,EAAO,IAAI,CAAC,yBAEZ,MAAA,CADA,EAAO,QAAQ,CAAC,yBAEf,MAAA,CADD,EAAO,GAAG,CAAC,0BACoC,MAAA,CAA9C,OAAO,EAAO,MAAM,EAAE,cAAc,CAAC,SAAS,uBAE1D,GAAA,IAAI,CAAC,IAAI,iBAEd,EAEA,EAAM,gBAAgB,CAAC,QAAS,SAAA,CAAhC,EACE,IAAM,EAAU,EAAE,MAAM,CAAC,OAAO,CAAC,MAEjC,GAAI,EAAS,CACX,IAAM,EACF,EAAQ,WAAW,CAAC,EAAE,CAAC,WAAW,GAAK,EAAQ,WAAW,CAAC,KAAK,CAAC,GAErE,EAAO,IAAI,CAAC,SAAC,CAAA,CAAa,CAA1B,QACE,AAAI,AAAc,SAAd,GAAwB,AAAc,aAAd,EACnB,CAAW,CAAC,EAAU,CAAC,aAAa,CAAC,CAAY,CAAC,EAAU,EAG9D,CAAW,CAAC,EAAU,CAAG,CAAY,CAAC,EAAU,AACzD,GAEA,GACF,CACF,E,4D","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\n// write code here\nvar table = document.querySelector(\"table\");\nvar initiPeople = function() {\n    var rows = _to_consumable_array(table.children[1].children);\n    var peopleInit = [];\n    rows.forEach(function(row) {\n        var person = {\n            name: \"\",\n            position: \"\",\n            age: 0,\n            salary: 0\n        };\n        var values = row.textContent.trim().split(\"\\n\").map(function(value) {\n            return value.trim();\n        });\n        var i = 0;\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = Object.keys(person)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var key = _step.value;\n                if (key === \"salary\") {\n                    person[key] = values[i].slice(1).replaceAll(\",\", \"\");\n                    continue;\n                }\n                if (values[i] !== undefined) {\n                    person[key] = values[i];\n                    i++;\n                }\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n        peopleInit.push(person);\n    });\n    return peopleInit;\n};\nvar people = initiPeople();\nvar render = function() {\n    table.children[1].innerHTML = \"\\n    <tbody>\\n      \".concat(people.map(function(person) {\n        return \"<tr>\\n          <td>\".concat(person.name, \"</td>\\n          <td>\").concat(person.position, \"</td>\\n          <td>\").concat(person.age, \"</td>\\n          <td>$\").concat(Number(person.salary).toLocaleString(\"en-US\"), \"</td>\\n        </tr>\");\n    }).join(\"\"), \"\\n    </tbody>\");\n};\ntable.addEventListener(\"click\", function(e) {\n    var sortBtn = e.target.closest(\"th\");\n    if (sortBtn) {\n        var filterKey = sortBtn.textContent[0].toLowerCase() + sortBtn.textContent.slice(1);\n        people.sort(function(personFirst, personSecond) {\n            if (filterKey === \"name\" || filterKey === \"position\") return personFirst[filterKey].localeCompare(personSecond[filterKey]);\n            return personFirst[filterKey] - personSecond[filterKey];\n        });\n        render();\n    }\n});\n\n//# sourceMappingURL=index.a9a5b0a6.js.map\n","'use strict';\n\n// write code here\nconst table = document.querySelector('table');\n\nconst initiPeople = () => {\n  const rows = [...table.children[1].children];\n  const peopleInit = [];\n\n  rows.forEach(row => {\n    const person = {\n      name: '',\n      position: '',\n      age: 0,\n      salary: 0,\n    };\n\n    const values\n      = row.textContent.trim().split('\\n').map(value => value.trim());\n\n    let i = 0;\n\n    for (const key of Object.keys(person)) {\n      if (key === 'salary') {\n        person[key] = values[i].slice(1).replaceAll(',', '');\n\n        continue;\n      }\n\n      if (values[i] !== undefined) {\n        person[key] = values[i];\n\n        i++;\n      }\n    }\n\n    peopleInit.push(person);\n  });\n\n  return peopleInit;\n};\n\nconst people = initiPeople();\n\nconst render = () => {\n  table.children[1].innerHTML = `\n    <tbody>\n      ${people.map(person => (\n    `<tr>\n          <td>${person.name}</td>\n          <td>${person.position}</td>\n          <td>${person.age}</td>\n          <td>$${Number(person.salary).toLocaleString('en-US')}</td>\n        </tr>`\n  )).join('')}\n    </tbody>`;\n};\n\ntable.addEventListener('click', e => {\n  const sortBtn = e.target.closest('th');\n\n  if (sortBtn) {\n    const filterKey\n      = sortBtn.textContent[0].toLowerCase() + sortBtn.textContent.slice(1);\n\n    people.sort((personFirst, personSecond) => {\n      if (filterKey === 'name' || filterKey === 'position') {\n        return personFirst[filterKey].localeCompare(personSecond[filterKey]);\n      }\n\n      return personFirst[filterKey] - personSecond[filterKey];\n    });\n\n    render();\n  }\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","rows","peopleInit","table","document","querySelector","people","_array_without_holes","isArray","children","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","forEach","row","person","position","age","salary","values","textContent","trim","split","map","value","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","keys","next","done","key","replaceAll","err","return","push","render","innerHTML","concat","Number","toLocaleString","join","addEventListener","e","sortBtn","target","closest","filterKey","toLowerCase","sort","personFirst","personSecond","localeCompare"],"version":3,"file":"index.a9a5b0a6.js.map"}